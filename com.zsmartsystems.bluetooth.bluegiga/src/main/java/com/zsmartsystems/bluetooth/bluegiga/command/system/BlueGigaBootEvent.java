/**
 * Copyright (c) 2014-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.bluetooth.bluegiga.command.system;

import com.zsmartsystems.bluetooth.bluegiga.BlueGigaResponse;

/**
 * Class to implement the BlueGiga command <b>bootEvent</b>.
 * <p>
 * This event is produced when the device boots up and is ready to receive commands. This event is
 * not sent over USB interface.
 * <p>
 * This class provides methods for processing BlueGiga API commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class BlueGigaBootEvent extends BlueGigaResponse {
    public static int COMMAND_CLASS = 0x00;
    public static int COMMAND_METHOD = 0x00;

    /**
     * Major software version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     */
    private int major;

    /**
     * Minor software version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     */
    private int minor;

    /**
     * Patch ID
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     */
    private int patch;

    /**
     * Build version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     */
    private int build;

    /**
     * Link layer version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     */
    private int ll_version;

    /**
     * Protocol version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     */
    private int protocol_version;

    /**
     * Hardware version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     */
    private int hw;

    /**
     * Event constructor
     */
    public BlueGigaBootEvent(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        // Deserialize the fields
        major = deserializeUInt16();
        minor = deserializeUInt16();
        patch = deserializeUInt16();
        build = deserializeUInt16();
        ll_version = deserializeUInt16();
        protocol_version = deserializeUInt16();
        hw = deserializeUInt16();
    }

    /**
     * Major software version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     *
     * @return the current major as {@link int}
     */
    public int getMajor() {
        return major;
    }

    /**
     * Minor software version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     *
     * @return the current minor as {@link int}
     */
    public int getMinor() {
        return minor;
    }

    /**
     * Patch ID
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     *
     * @return the current patch as {@link int}
     */
    public int getPatch() {
        return patch;
    }

    /**
     * Build version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     *
     * @return the current build as {@link int}
     */
    public int getBuild() {
        return build;
    }

    /**
     * Link layer version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     *
     * @return the current ll_version as {@link int}
     */
    public int getLl_version() {
        return ll_version;
    }

    /**
     * Protocol version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     *
     * @return the current protocol_version as {@link int}
     */
    public int getProtocol_version() {
        return protocol_version;
    }

    /**
     * Hardware version
     * <p>
     * BlueGiga API type is <i>uint16</i> - Java type is {@link int}
     *
     * @return the current hw as {@link int}
     */
    public int getHw() {
        return hw;
    }


    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder();
        builder.append("BlueGigaBootEvent [major=");
        builder.append(major);
        builder.append(", minor=");
        builder.append(minor);
        builder.append(", patch=");
        builder.append(patch);
        builder.append(", build=");
        builder.append(build);
        builder.append(", ll_version=");
        builder.append(ll_version);
        builder.append(", protocol_version=");
        builder.append(protocol_version);
        builder.append(", hw=");
        builder.append(hw);
        builder.append("]");
        return builder.toString();
    }
}
