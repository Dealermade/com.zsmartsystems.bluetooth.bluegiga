/**
 * Copyright (c) 2014-2017 by the respective copyright holders.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package com.zsmartsystems.bluetooth.bluegiga.command.gap;

import com.zsmartsystems.bluetooth.bluegiga.BlueGigaResponse;

/**
 * Class to implement the BlueGiga command <b>scanResponseEvent</b>.
 * <p>
 * This is a scan response event. This event is normally received by a Master which is scanning
 * for advertisement and scan response packets from Slaves.
 * <p>
 * This class provides methods for processing BlueGiga API commands.
 * <p>
 * Note that this code is autogenerated. Manual changes may be overwritten.
 *
 * @author Chris Jackson - Initial contribution of Java code generator
 */
public class BlueGigaScanResponseEvent extends BlueGigaResponse {
    public static int COMMAND_CLASS = 0x06;
    public static int COMMAND_METHOD = 0x00;

    /**
     * Connection handle
     * <p>
     * BlueGiga API type is <i>uint8</i> - Java type is {@link int}
     */
    private int rssi;

    /**
     * Scan response header. 0: Connectable Advertisement packet. 2: Non Connectable
     * Advertisement packet. 4: Scan response packet. 6: Discoverable advertisement packet
     * <p>
     * BlueGiga API type is <i>uint8</i> - Java type is {@link int}
     */
    private int packetType;

    /**
     * Advertiser address type. 1: random address. 0: public address
     * <p>
     * BlueGiga API type is <i>bd_addr</i> - Java type is {@link String}
     */
    private String sender;

    /**
     * Bond handle if there is known bond for this device, 0xff otherwise
     * <p>
     * BlueGiga API type is <i>uint8</i> - Java type is {@link int}
     */
    private int bond;

    /**
     * Scan response data
     * <p>
     * BlueGiga API type is <i>uint8array</i> - Java type is {@link int[]}
     */
    private int[] data;

    /**
     * Event constructor
     */
    public BlueGigaScanResponseEvent(int[] inputBuffer) {
        // Super creates deserializer and reads header fields
        super(inputBuffer);

        // Deserialize the fields
        rssi = deserializeUInt8();
        packetType = deserializeUInt8();
        sender = deserializeAddress();
        bond = deserializeUInt8();
        data = deserializeUInt8Array();
    }

    /**
     * Connection handle
     * <p>
     * BlueGiga API type is <i>uint8</i> - Java type is {@link int}
     *
     * @return the current rssi as {@link int}
     */
    public int getRssi() {
        return rssi;
    }

    /**
     * Scan response header. 0: Connectable Advertisement packet. 2: Non Connectable
     * Advertisement packet. 4: Scan response packet. 6: Discoverable advertisement packet
     * <p>
     * BlueGiga API type is <i>uint8</i> - Java type is {@link int}
     *
     * @return the current packet_type as {@link int}
     */
    public int getPacketType() {
        return packetType;
    }

    /**
     * Advertiser address type. 1: random address. 0: public address
     * <p>
     * BlueGiga API type is <i>bd_addr</i> - Java type is {@link String}
     *
     * @return the current sender as {@link String}
     */
    public String getSender() {
        return sender;
    }

    /**
     * Bond handle if there is known bond for this device, 0xff otherwise
     * <p>
     * BlueGiga API type is <i>uint8</i> - Java type is {@link int}
     *
     * @return the current bond as {@link int}
     */
    public int getBond() {
        return bond;
    }

    /**
     * Scan response data
     * <p>
     * BlueGiga API type is <i>uint8array</i> - Java type is {@link int[]}
     *
     * @return the current data as {@link int[]}
     */
    public int[] getData() {
        return data;
    }


    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder();
        builder.append("BlueGigaScanResponseEvent [rssi=");
        builder.append(rssi);
        builder.append(", packetType=");
        builder.append(packetType);
        builder.append(", sender=");
        builder.append(sender);
        builder.append(", bond=");
        builder.append(bond);
        builder.append(", data=");
        builder.append(data);
        builder.append(']');
        return builder.toString();
    }
}
